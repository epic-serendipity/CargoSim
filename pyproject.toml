[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cargosim"
dynamic = ["version"]
description = "Professional hub-and-spoke logistics simulator with modular architecture"
authors = [{name = "CargoSim Development Team"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"
keywords = ["simulation", "logistics", "airlift", "pygame", "modular"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Games/Entertainment :: Simulation",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pygame>=2.5",
    "tkinter; sys_platform != 'darwin'",  # Built-in on most systems
]

[project.optional-dependencies]
video = [
    "imageio>=2.25",
    "imageio-ffmpeg>=0.4"
]
dev = [
    "pytest>=7",
    "pytest-cov>=4.0",
    "ruff>=0.4",
    "mypy>=1.8",
    "types-Pillow",
    "types-requests",
    "black>=23.0",
    "pre-commit>=3.0"
]
docs = [
    "sphinx>=6.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=1.0"
]

[project.scripts]
cargosim = "cargosim.__main__:main"
cargosim-headless = "cargosim.__main__:headless"

[project.urls]
Homepage = "https://github.com/cargosim/cargosim"
Documentation = "https://cargosim.readthedocs.io/"
Repository = "https://github.com/cargosim/cargosim.git"
Issues = "https://github.com/cargosim/cargosim/issues"
Changelog = "https://github.com/cargosim/cargosim/blob/main/CHANGELOG.md"

[tool.hatch.version]
path = "cargosim/__init__.py"

[tool.ruff]
line-length = 88
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["cargosim"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
